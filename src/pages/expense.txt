import React, { useState, useEffect } from 'react';
import { 
  Box, Typography, Paper, Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Button, IconButton, Dialog, DialogActions, 
  DialogContent, DialogContentText, DialogTitle, TextField, MenuItem,
  Grid, CircularProgress, TablePagination, Chip, InputAdornment,
  Card, CardContent, useTheme, Snackbar, Alert, FormControl, InputLabel,
  Select, Stack
} from '@mui/material';
import { 
  Add as AddIcon, 
  Delete as DeleteIcon, 
  Edit as EditIcon, 
  Receipt as ReceiptIcon,
  Search as SearchIcon,
  Clear as ClearIcon,
  FilterList as FilterIcon
} from '@mui/icons-material';
import { format, parseISO } from 'date-fns';
import MainLayout from '../layouts/MainLayout';
import { exportExpensesToCSV, exportExpensesToPDF } from '../utils/exportUtils';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';
import { getExpenses, addExpense, updateExpense, deleteExpense } from '../api/expenses';
import { getCategories } from '../api/categories';
import AOS from 'aos';
import 'aos/dist/aos.css';

const Expenses = () => {
  const theme = useTheme();

  const [expenses, setExpenses] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [totalExpenses, setTotalExpenses] = useState(0);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [filters, setFilters] = useState({
    category: '',
    dateFrom: '',
    dateTo: '',
    searchTerm: ''
  });
  const [showFilters, setShowFilters] = useState(false);
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [openAddDialog, setOpenAddDialog] = useState(false);
  const [openEditDialog, setOpenEditDialog] = useState(false);
  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
  const [currentExpense, setCurrentExpense] = useState(null);
  const [formData, setFormData] = useState({
    amount: '',
    date: new Date().toISOString().split('T')[0],
    description: '',
    category_id: '',
    receipt_path: null
  });
  const [formErrors, setFormErrors] = useState({});
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success'
  });

  useEffect(() => {
    AOS.init({
      duration: 800,
      easing: 'ease-out-cubic',
      once: true,
      offset: 50,
      delay: 50,
      mirror: false,
      anchorPlacement: 'top-bottom',
      disable: window.innerWidth < 768
    });

    const handleResize = () => {
      AOS.refresh();
    };

    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  useEffect(() => {
    if (!loading) {
      AOS.refresh();
    }
  }, [loading]);

  useEffect(() => {
    fetchExpenses();
  }, [page, rowsPerPage, filters]);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await getCategories();
        setCategories(response);
      } catch (error) {
        console.error('Error fetching categories:', error);
        showSnackbar('Failed to load categories', 'error');
      }
    };

    fetchCategories();
  }, []);

  const fetchExpenses = async () => {
    try {
      setLoading(true);
      const params = {
        page: page + 1,
        per_page: rowsPerPage,
        category_id: filters.category || undefined,
        date_from: filters.dateFrom || undefined,
        date_to: filters.dateTo || undefined,
        search: filters.searchTerm || undefined,
        sort_by: 'date',
        sort_order: 'desc'
      };
      const response = await getExpenses(params);
      if (response && Array.isArray(response.data)) {
        setExpenses(response.data);
        setTotalExpenses(response.total || response.data.length);
      } else if (Array.isArray(response)) {
        setExpenses(response);
        setTotalExpenses(response.length);
      } else {
        console.error('Unexpected response format:', response);
        setExpenses([]);
        setTotalExpenses(0);
      }
    } catch (error) {
      console.error('Error fetching expenses:', error);
      showSnackbar('Failed to load expenses', 'error');
      setExpenses([]);
      setTotalExpenses(0);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    return () => {
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }
    };
  }, [searchTimeout]);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const validateDateFilters = () => {
    if (filters.dateFrom && filters.dateTo) {
      const fromDate = new Date(filters.dateFrom);
      const toDate = new Date(filters.dateTo);
      if (fromDate > toDate) {
        showSnackbar('From date cannot be after To date', 'error');
        return false;
      }
    }
    return true;
  };

  const handleFilterChange = (field, value) => {
    clearTimeout(searchTimeout);
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
    if (field === 'searchTerm') {
      const timeoutId = setTimeout(() => {
        setPage(0);
        fetchExpenses();
      }, 500);
      setSearchTimeout(timeoutId);
    }
  };

  const handleClearFilters = () => {
    setFilters({
      category: '',
      dateFrom: '',
      dateTo: '',
      searchTerm: ''
    });
  };

  const handleToggleFilters = () => {
    setShowFilters(prev => !prev);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: null
      }));
    }
  };

  const validateForm = () => {
    const errors = {};
    if (!formData.amount || isNaN(formData.amount) || parseFloat(formData.amount) <= 0) {
      errors.amount = 'Please enter a valid amount';
    }
    if (!formData.date) {
      errors.date = 'Please select a date';
    }
    if (!formData.category_id) {
      errors.category_id = 'Please select a category';
    }
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleOpenAddDialog = () => {
    setFormData({
      amount: '',
      date: new Date().toISOString().split('T')[0],
      description: '',
      category_id: '',
      receipt_path: null
    });
    setFormErrors({});
    setOpenAddDialog(true);
  };

  const handleOpenEditDialog = (expense) => {
    setCurrentExpense(expense);
    setFormData({
      amount: expense.amount.toString(),
      date: expense.date,
      description: expense.description || '',
      category_id: expense.category_id,
      receipt_path: expense.receipt_path
    });
    setFormErrors({});
    setOpenEditDialog(true);
  };

  const handleOpenDeleteDialog = (expense) => {
    setCurrentExpense(expense);
    setOpenDeleteDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenAddDialog(false);
    setOpenEditDialog(false);
    setOpenDeleteDialog(false);
    setCurrentExpense(null);
  };

  const handleAddExpense = async () => {
    if (!validateForm()) return;
    try {
      setLoading(true);
      const expenseData = {
        ...formData,
        category_id: parseInt(formData.category_id, 10)
      };
      await addExpense(expenseData);
      handleCloseDialog();
      showSnackbar('Expense added successfully', 'success');
      fetchExpenses();
    } catch (error) {
      const errorMessage = error.response?.data?.message || 'Failed to add expense';
      console.error('Error:', errorMessage);
      showSnackbar(errorMessage, 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleEditExpense = async () => {
    if (!validateForm() || !currentExpense) return;
    try {
      setLoading(true);
      await updateExpense(currentExpense.id, formData);
      handleCloseDialog();
      showSnackbar('Expense updated successfully', 'success');
      fetchExpenses();
    } catch (error) {
      console.error('Error updating expense:', error);
      showSnackbar('Failed to update expense', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteExpense = async () => {
    if (!currentExpense) return;
    try {
      setLoading(true);
      await deleteExpense(currentExpense.id);
      handleCloseDialog();
      showSnackbar('Expense deleted successfully', 'success');
      fetchExpenses();
    } catch (error) {
      console.error('Error deleting expense:', error);
      showSnackbar('Failed to delete expense', 'error');
    } finally {
      setLoading(false);
    }
  };

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({
      open: true,
      message,
      severity
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({
      ...prev,
      open: false
    }));
  };

  const formatDate = (dateString) => {
    try {
      const date = parseISO(dateString);
      return format(date, 'MMM dd, yyyy');
    } catch (error) {
      return dateString;
    }
  };

  const renderFilters = () => (
    <Card 
      sx={{ mb: 3, boxShadow: 2 }} 
      data-aos="fade-down"
      data-aos-duration="800"
    >
      <CardContent>
        <Grid container spacing={2}>
          <Grid item xs={12} md={6}>
            <TextField
              fullWidth
              variant="outlined"
              placeholder="Search expenses..."
              value={filters.searchTerm}
              onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
                endAdornment: filters.searchTerm && (
                  <InputAdornment position="end">
                    <IconButton size="small" onClick={() => handleFilterChange('searchTerm', '')}>
                      <ClearIcon fontSize="small" />
                    </IconButton>
                  </InputAdornment>
                )
              }}
              size="small"
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <Stack direction="row" spacing={2} justifyContent="flex-end">
              <Button
                variant="outlined"
                onClick={handleToggleFilters}
                startIcon={<FilterIcon />}
                size="medium"
              >
                {showFilters ? 'Hide Filters' : 'Show Filters'}
              </Button>
              <Button
                variant="outlined"
                startIcon={<FileDownloadIcon />}
                onClick={() => 
                ('csv')}
                size="medium"
              >
                Export CSV
              </Button>
            </Stack>
          </Grid>
        </Grid>
        {showFilters && (
          <Box sx={{ mt: 3, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
            <Grid container spacing={2} alignItems="center">
              <Grid item xs={12} md={3}>
                <FormControl fullWidth size="small">
                  <InputLabel>Category</InputLabel>
                  <Select
                    value={filters.category}
                    label="Category"
                    onChange={(e) => handleFilterChange('category', e.target.value)}
                  >
                    <MenuItem value="">All Categories</MenuItem>
                    {categories.map((category) => (
                      <MenuItem key={category.id} value={category.id}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Box
                            sx={{
                              width: 10,
                              height: 10,
                              borderRadius: '50%',
                              bgcolor: category.color
                            }}
                          />
                          {category.name}
                        </Box>
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
              <Grid item xs={12} md={3}>
                <TextField
                  fullWidth
                  label="From Date"
                  type="date"
                  value={filters.dateFrom}
                  onChange={(e) => handleFilterChange('dateFrom', e.target.value)}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <TextField
                  fullWidth
                  label="To Date"
                  type="date"
                  value={filters.dateTo}
                  onChange={(e) => handleFilterChange('dateTo', e.target.value)}
                  InputLabelProps={{ shrink: true }}
                  size="small"
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <Stack direction="row" spacing={1}>
                  <Button
                    variant="contained"
                    onClick={() => {
                      if (validateDateFilters()) {
                        setPage(0);
                        fetchExpenses();
                      }
                    }}
                    fullWidth
                  >
                    Apply Filters
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={handleClearFilters}
                    fullWidth
                  >
                    Clear
                  </Button>
                </Stack>
              </Grid>
            </Grid>
          </Box>
        )}
      </CardContent>
    </Card>
  );

  const renderTable = () => (
    <Paper 
      sx={{ width: '100%', mb: 2, boxShadow: 2 }} 
      data-aos="fade-up"
      data-aos-duration="1000"
    >
      <TableContainer>
        <Table sx={{ minWidth: 650 }} aria-label="expenses table">
          <TableHead data-aos="fade-in" data-aos-delay="200">
            <TableRow sx={{ backgroundColor: theme.palette.grey[100] }}>
              <TableCell sx={{ fontWeight: 'bold' }}>Date</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }}>Category</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }}>Description</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }} align="right">Amount</TableCell>
              <TableCell sx={{ fontWeight: 'bold' }} align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow> 
                <TableCell colSpan={5} align="center" sx={{ py: 5 }}>
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : expenses && expenses.length > 0 ? (
              expenses.map((expense, index) => (
                <TableRow 
                  key={expense.id}
                  hover
                  data-aos="fade-left"
                  data-aos-delay={100 + (index % 10) * 50}
                  data-aos-offset={50}
                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                >
                  <TableCell component="th" scope="row">
                    {formatDate(expense.date)}
                  </TableCell>
                  <TableCell>
                    <Chip 
                      label={expense.category?.name || 'Unknown'}
                      size="small"
                      sx={{ 
                        bgcolor: expense.category?.color || theme.palette.primary.light,
                        color: theme.palette.getContrastText(expense.category?.color || theme.palette.primary.light)
                      }}
                    />
                  </TableCell>
                  <TableCell>
                    {expense.description || '-'}
                  </TableCell>
                  <TableCell align="right">
                    <Typography 
                      variant="body2" 
                      sx={{ fontWeight: 'medium', fontSize: '0.9rem' }}
                    >
                      ₱{parseFloat(expense.amount).toFixed(2)}
                    </Typography>
                  </TableCell>
                  <TableCell align="right">
                    <Stack direction="row" spacing={1} justifyContent="flex-end">
                      <IconButton 
                        size="small" 
                        color="primary"
                        onClick={() => handleOpenEditDialog(expense)}
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                      <IconButton 
                        size="small" 
                        color="error"
                        onClick={() => handleOpenDeleteDialog(expense)}
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Stack>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} align="center" sx={{ py: 4 }}>
                  <Typography variant="body1" color="textSecondary">
                    No expenses found
                  </Typography>
                  <Button 
                    variant="outlined" 
                    startIcon={<AddIcon />} 
                    sx={{ mt: 2 }}
                    onClick={handleOpenAddDialog}
                  >
                    Add your first expense
                  </Button>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
        <Box 
          data-aos="fade-up"
          data-aos-delay="100"
          data-aos-offset="0"
        >
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={totalExpenses || 0}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
          />
        </Box>
      </TableContainer>
    </Paper>
  );

  const DialogWithAnimation = ({ open, onClose, title, content, actions }) => (
    <Dialog 
      open={open} 
      onClose={onClose}
      TransitionProps={{
        onEntered: () => {
          setTimeout(() => AOS.refresh(), 100);
        }
      }}
    >
      <DialogTitle data-aos="fade-down" data-aos-duration="500">
        {title}
      </DialogTitle>
      <DialogContent data-aos="fade-up" data-aos-duration="500" data-aos-delay="100">
        {content}
      </DialogContent>
      <DialogActions data-aos="fade-up" data-aos-duration="500" data-aos-delay="200">
        {actions}
      </DialogActions>
    </Dialog>
  );

  return (
    <MainLayout>
      <Box 
        sx={{ mb: 4, px: 1 }} 
        data-aos="fade-right"
        data-aos-duration="1000"
      >
        <Typography 
          variant="h4" 
          component="h1"
          data-aos="fade-down"
          data-aos-delay="200"
          sx={{ 
            fontWeight: 500,
            fontSize: { xs: '1.8rem', md: '2.125rem' }
          }}
        >
          Expenses
        </Typography>
        <Typography 
          variant="subtitle1" 
          color="textSecondary"
          data-aos="fade-up"
          data-aos-delay="300"
          sx={{ mb: 2 }}
        >
          Manage and track your expenses
        </Typography>
      </Box>
      <Box 
        sx={{ mb: 3, display: 'flex', justifyContent: 'flex-end' }}
        data-aos="fade-left"
        data-aos-delay="400"
      >
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleOpenAddDialog}
          sx={{
            fontWeight: 500,
            textTransform: 'none',
            px: 3,
            py: 1,
            borderRadius: 2,
            boxShadow: 2,
            '&:hover': {
              boxShadow: 3,
            }
          }}
        >
          Add Expense
        </Button>
      </Box>
      {renderFilters()}
      {renderTable()}
      <DialogWithAnimation
        open={openAddDialog}
        onClose={handleCloseDialog}
        title="Add New Expense"
        content={(
          <Grid container spacing={2} sx={{ mt: 0.5 }}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Amount"
                name="amount"
                type="number"
                value={formData.amount}
                onChange={handleInputChange}
                error={!!formErrors.amount}
                helperText={formErrors.amount}
                InputProps={{
                  startAdornment: <InputAdornment position="start">₱</InputAdornment>,
                }}
                required
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Date"
                name="date"
                type="date"
                value={formData.date}
                onChange={handleInputChange}
                InputLabelProps={{ shrink: true }}
                error={!!formErrors.date}
                helperText={formErrors.date}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth error={!!formErrors.category_id} required>
                <InputLabel id="category-label">Category</InputLabel>
                <Select
                  labelId="category-label"
                  name="category_id"
                  value={formData.category_id}
                  label="Category"
                  onChange={handleInputChange}
                >
                  {categories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.category_id && (
                  <Typography variant="caption" color="error" sx={{ mt: 0.5, ml: 1.5 }}>
                    {formErrors.category_id}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description (Optional)"
                name="description"
                multiline
                rows={2}
                value={formData.description}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Receipt Image URL (Optional)"
                name="receipt_path"
                value={formData.receipt_path || ''}
                onChange={handleInputChange}
                placeholder="https://example.com/receipt.jpg"
              />
            </Grid>
          </Grid>
        )}
        actions={(
          <>
            <Button onClick={handleCloseDialog} color="inherit">Cancel</Button>
            <Button 
              onClick={handleAddExpense} 
              variant="contained" 
              color="primary"
              disabled={loading}
            >
              {loading ? 'Saving...' : 'Save Expense'}
            </Button>
          </>
        )}
      />
      <DialogWithAnimation
        open={openEditDialog}
        onClose={handleCloseDialog}
        title="Edit Expense"
        content={(
          <Grid container spacing={2} sx={{ mt: 0.5 }}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Amount"
                name="amount"
                type="number"
                value={formData.amount}
                onChange={handleInputChange}
                error={!!formErrors.amount}
                helperText={formErrors.amount}
                InputProps={{
                  startAdornment: <InputAdornment position="start">₱</InputAdornment>,
                }}
                required
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Date"
                name="date"
                type="date"
                value={formData.date}
                onChange={handleInputChange}
                InputLabelProps={{ shrink: true }}
                error={!!formErrors.date}
                helperText={formErrors.date}
                required
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth error={!!formErrors.category_id} required>
                <InputLabel id="category-edit-label">Category</InputLabel>
                <Select
                  labelId="category-edit-label"
                  name="category_id"
                  value={formData.category_id}
                  label="Category"
                  onChange={handleInputChange}
                >
                  {categories.map((category) => (
                    <MenuItem key={category.id} value={category.id}>
                      {category.name}
                    </MenuItem>
                  ))}
                </Select>
                {formErrors.category_id && (
                  <Typography variant="caption" color="error" sx={{ mt: 0.5, ml: 1.5 }}>
                    {formErrors.category_id}
                  </Typography>
                )}
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Description (Optional)"
                name="description"
                multiline
                rows={2}
                value={formData.description}
                onChange={handleInputChange}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Receipt Image URL (Optional)"
                name="receipt_path"
                value={formData.receipt_path || ''}
                onChange={handleInputChange}
                placeholder="https://example.com/receipt.jpg"
              />
            </Grid>
          </Grid>
        )}
        actions={(
          <>
            <Button onClick={handleCloseDialog} color="inherit">Cancel</Button>
            <Button 
              onClick={handleEditExpense} 
              variant="contained" 
              color="primary"
              disabled={loading}
            >
              {loading ? 'Updating...' : 'Update Expense'}
            </Button>
          </>
        )}
      />
      <DialogWithAnimation
        open={openDeleteDialog}
        onClose={handleCloseDialog}
        title="Confirm Delete"
        content={(
          <>
            <DialogContentText>
              Are you sure you want to delete this expense? This action cannot be undone.
            </DialogContentText>
            {currentExpense && (
              <Box sx={{ mt: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Typography variant="body2" color="textSecondary">Date:</Typography>
                    <Typography variant="body1">
                      {formatDate(currentExpense.date)}
                    </Typography>
                  </Grid>
                  <Grid item xs={6}>
                    <Typography variant="body2" color="textSecondary">Amount:</Typography>
                    <Typography variant="body1" fontWeight="medium">
                      ₱{parseFloat(currentExpense.amount).toFixed(2)}
                    </Typography>
                  </Grid>
                  <Grid item xs={12}>
                    <Typography variant="body2" color="textSecondary">Category:</Typography>
                    <Typography variant="body1">
                      {currentExpense.category?.name || 'Unknown'}
                    </Typography>
                  </Grid>
                  {currentExpense.description && (
                    <Grid item xs={12}>
                      <Typography variant="body2" color="textSecondary">Description:</Typography>
                      <Typography variant="body1">{currentExpense.description}</Typography>
                    </Grid>
                  )}
                </Grid>
              </Box>
            )}
          </>
        )}
        actions={(
          <>
            <Button onClick={handleCloseDialog} color="inherit">Cancel</Button>
            <Button 
              onClick={handleDeleteExpense} 
              variant="contained" 
              color="error"
              disabled={loading}
            >
              {loading ? 'Deleting...' : 'Delete'}
            </Button>
          </>
        )}
      />
      <Snackbar 
        open={snackbar.open} 
        autoHideDuration={6000} 
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert 
          onClose={handleCloseSnackbar} 
          severity={snackbar.severity} 
          variant="filled"
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </MainLayout>
  );
};

export default Expenses;